--- acoc_ori	2010-10-07 16:03:29.089119182 -0300
+++ acoc	2010-10-07 16:05:52.657578887 -0300
@@ -83,24 +83,26 @@
 
 include Term::ANSIColor
 
-class Config < Hash; end
+module Acoc
+  class Config < Hash; end
 
-class Program
-  attr_accessor :flags, :specs
+  class Program
+    attr_accessor :flags, :specs
 
-  def initialize(flags)
-    @flags = flags || ""
-    @specs = Array.new
+    def initialize(flags)
+      @flags = flags || ""
+      @specs = Array.new
+    end
   end
-end
 
-class Rule
-  attr_reader :regex, :flags, :colours
+  class Rule
+    attr_reader :regex, :flags, :colours
 
-  def initialize(regex, flags, colours)
-    @regex   = regex
-    @flags   = flags
-    @colours = colours
+    def initialize(regex, flags, colours)
+      @regex   = regex
+      @flags   = flags
+      @colours = colours
+    end
   end
 end
 
@@ -153,7 +155,7 @@
 # get configuration data
 #
 def parse_config(*files)
-  @cmd   = Config.new
+  @cmd   = Acoc::Config.new
   parsed = 0
 
   files.each do |file|
@@ -161,7 +163,7 @@
     next unless file && FileTest::file?(file) && FileTest::readable?(file)
 
     begin
-      f = File.open(file) do |f|
+      fo = File.open(file) do |f|
 	while line = f.gets do
 	  next if line =~ /^(#|$)/     # skip blank lines and comments
 
@@ -184,7 +186,7 @@
 	      if @cmd.has_key?(invocation)
 		@cmd[invocation].flags += flags unless flags.nil?
 	      else
-	        @cmd[invocation] = Program.new(flags)
+	        @cmd[invocation] = Acoc::Program.new(flags)
 	      end
 	      prog.sub!(%r(/\w+), '')
 	    end
@@ -205,7 +207,7 @@
 	  end
 
 	  progs.each do |prog|
-	    @cmd[prog].specs << Rule.new(Regexp.new(regex), flags, colours)
+	    @cmd[prog].specs << Acoc::Rule.new(Regexp.new(regex), flags, colours)
 	  end
 	end
       end
@@ -264,7 +266,7 @@
   matched = false
 
   # act on only the first match unless the /a flag was given
-  break if matched && ! @cmd[prog].flags.include?('a')
+  return if matched && ! @cmd[prog].flags.include?('a')
 
   # get a pattern and attribute set pairing for this command
   @cmd[prog].specs.each do |spec|
