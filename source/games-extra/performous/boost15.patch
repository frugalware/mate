diff -Naur performous-1.0/game/ffmpeg.cc performous-1.0.new/game/ffmpeg.cc
--- performous-1.0/game/ffmpeg.cc	2014-10-29 00:11:45.000000000 +0100
+++ performous-1.0.new/game/ffmpeg.cc	2015-01-04 18:53:13.473929387 +0100
@@ -196,9 +196,9 @@
 		packetSize -= decodeSize; // Move forward within the packet
 		if (!frameFinished) continue;
 		// Update current position if timecode is available
-		if (frame->pkt_pts != int64_t(AV_NOPTS_VALUE)) {
+		if (frame->pkt_pts != boost::int64_t(AV_NOPTS_VALUE)) {
 			m_position = double(frame->pkt_pts) * av_q2d(m_formatContext->streams[m_streamId]->time_base);
-			if (m_formatContext->start_time != int64_t(AV_NOPTS_VALUE))
+			if (m_formatContext->start_time != boost::int64_t(AV_NOPTS_VALUE))
 				m_position -= double(m_formatContext->start_time) / AV_TIME_BASE;
 		}
 		if (m_mediaType == AVMEDIA_TYPE_VIDEO) processVideo(frame.get()); else processAudio(frame.get());
diff -Naur performous-1.0/game/ffmpeg.hh performous-1.0.new/game/ffmpeg.hh
--- performous-1.0/game/ffmpeg.hh	2014-10-29 00:11:45.000000000 +0100
+++ performous-1.0.new/game/ffmpeg.hh	2015-01-04 18:52:19.061305668 +0100
@@ -15,7 +15,6 @@
 
 using boost::uint8_t;
 using boost::int16_t;
-using boost::int64_t;
 
 /// single audio frame
 struct AudioFrame {
@@ -109,7 +108,7 @@
 		m_data.insert(m_data.end(), data.begin(), data.end());
 		m_pos += data.size();
 	}
-	bool prepare(int64_t pos) {
+	bool prepare(boost::int64_t pos) {
 		mutex::scoped_try_lock l(m_mutex);
 		if (!l.owns_lock()) return false;  // Didn't get lock, give up for now
 		if (eof(pos)) return true;
@@ -119,7 +118,7 @@
 		// Has enough been prebuffered already and is the requested position still within buffer
 		return m_pos > m_posReq + m_data.capacity() / 16 && m_pos <= m_posReq + m_data.size();
 	}
-	bool operator()(float* begin, float* end, int64_t pos, float volume = 1.0f) {
+	bool operator()(float* begin, float* end, boost::int64_t pos, float volume = 1.0f) {
 		mutex::scoped_lock l(m_mutex);
 		size_t idx = pos + m_data.size() - m_pos;
 		size_t samples = end - begin;
@@ -130,7 +129,7 @@
 		wakeups();
 		return !eof(pos);
 	}
-	bool eof(int64_t pos) const { return double(pos) / m_sps >= m_duration; }
+	bool eof(boost::int64_t pos) const { return double(pos) / m_sps >= m_duration; }
 	void setEof() { m_duration = double(m_pos) / m_sps; }
 	double duration() const { return m_duration; }
 	void setDuration(double seconds) { m_duration = seconds; }
@@ -151,7 +150,7 @@
 	boost::condition m_cond;
 	boost::circular_buffer<int16_t> m_data;
 	size_t m_pos;
-	int64_t m_posReq;
+	boost::int64_t m_posReq;
 	unsigned m_sps;
 	double m_duration;
 	bool m_quit;
